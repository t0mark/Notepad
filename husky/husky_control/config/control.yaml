# =============================================================================
# Joint State Publisher 설정 - 로봇 관절 상태 정보 발행
# =============================================================================
husky_joint_publisher:
  type: "joint_state_controller/JointStateController"  # 관절 상태 컨트롤러 타입
  publish_rate: 50                                     # 관절 상태 발행 주기 (Hz) - RViz 시각화용

# =============================================================================
# Differential Drive Controller 설정 - 차등 구동 로봇 제어
# =============================================================================
husky_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"     # 차등 구동 컨트롤러 타입
  left_wheel: ['front_left_wheel', 'rear_left_wheel']   # 좌측 바퀴 관절 이름
  right_wheel: ['front_right_wheel', 'rear_right_wheel'] # 우측 바퀴 관절 이름
  publish_rate: 50                                      # 오도메트리 발행 주기 (Hz)
  
  # 오도메트리 공분산 설정 (위치/방향 불확실성 정의)
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]  # x,y,z,roll,pitch,yaw 위치 공분산
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03] # x,y,z,roll,pitch,yaw 속도 공분산
  cmd_vel_timeout: 0.5    # 0.25->0.5초로 증가하여 급정지 방지
  velocity_rolling_window_size: 5    # 2-> 5 증가하여 속도 평활화

  # 속도 평활화 효과:
  # velocity_rolling_window_size: 5의 효과:
  # - 속도 급변 방지: 최근 5개 속도값의 평균 사용
  # - 노이즈 제거: 엔코더 잡음으로 인한 급격한 변화 완화
  # - 부드러운 응답: 명령 변화가 점진적으로 반영

  # ==========================================================================
  # 속도 및 가속도 제한 (부드러운 주행을 위한 핵심 설정)
  # min_* 값이 지정되지 않으면 자동으로 -max_* 값으로 설정됨
  # ==========================================================================
  linear:
    x:
      has_velocity_limits    : true  # 선형 속도 제한 활성화
      max_velocity           : 1.0   # 전진/후진 최대 속도 (m/s) - 안전 운행 속도
      has_acceleration_limits: true  # 선형 가속도 제한 활성화
      max_acceleration       : 1.2   # 선형 가속도 제한 (m/s²) - 급가속 방지로 부드러운 출발
  angular:
    z:
      has_velocity_limits    : true  # 각속도 제한 활성화
      max_velocity           : 2.0   # 회전 최대 속도 (rad/s) ≈ 114도/초
      has_acceleration_limits: true  # 각가속도 제한 활성화
      max_acceleration       : 2.0   # 각가속도 제한 (rad/s²) - 급회전 방지


  # ==========================================================================
  # 출력 및 프레임 설정
  # ==========================================================================
  publish_cmd: true           # 최종 cmd_vel 명령을 /husky_velocity_controller/cmd_vel_out으로 발행
  base_frame_id: base_link    # 로봇 기준 프레임 ID
  
  # 오도메트리 TF 발행 비활성화 (커스텀 플러그인에서 처리)
  enable_odom_tf: false       # diff_drive_controller에서 odom->base_link TF 발행 안 함

  # ==========================================================================
  # 바퀴 형상 보정 계수 (하드웨어 캘리브레이션)
  # ==========================================================================
  wheel_separation_multiplier: 1.875   # 회전 , 바퀴 간격 보정 계수 (실측값 반영)
  wheel_radius_multiplier    : 1.0     # 직진 , 바퀴 반지름 보정 계수 (타이어 마모/공기압 보정)

  # 1. wheel_separation_multiplier: 1.875
  # - 바퀴 간격 보정 계수
  # - 실제 바퀴 간격 = 기본값 × 1.875
  # - 회전 반경 조정: 값이 클수록 더 넓은 회전
  # - 오도메트리 정확도 향상: 실제 하드웨어와 맞춤
  
  # 값이 증가하면 (1.875 → 2.0):
  # - 회전 시 더 넓은 호를 그림
  # - 같은 각속도 명령으로 더 큰 반지름 회전
  # - 오도메트리에서 실제보다 적게 회전한 것으로 계산
  # - 결과: 로봇이 목표보다 과회전 함
  
  # 값이 감소하면 (1.875 → 1.5):
  # - 회전 시 더 좁은 호를 그림
  # - 같은 각속도 명령으로 더 작은 반지름 회전
  # - 오도메트리에서 실제보다 많이 회전한 것으로 계산
  # - 결과: 로봇이 목표보다 덜 회전 함
    
  
  # 2. wheel_radius_multiplier: 1.0
  # - 바퀴 반지름 보정 계수
  # - 실제 바퀴 반지름 = 기본값 × 1.0 (보정 없음)
  # - 거리 측정 정확도: 값이 클수록 더 멀리 이동한 것으로 계산

  # 값이 증가하면 (1.0 → 1.1):
  # - 같은 바퀴 회전수로 더 멀리 이동한 것으로 계산
  # - 오도메트리에서 실제보다 빠르게 이동한 것으로 인식
  # - 결과: 로봇이 목표보다 일찍 정지 함

  # 값이 감소하면 (1.0 → 0.9):
  # - 같은 바퀴 회전수로 더 가까이 이동한 것으로 계산
  # - 오도메트리에서 실제보다 느리게 이동한 것으로 인식
  # - 결과: 로봇이 목표보다 늦게 정지 함

  # 실제 캘리브레이션 방법:
  # - 직선 1m 이동 → radius_multiplier 조정
  # - 360도 회전 → separation_multiplier 조정

  # 차이점:
  # - Launch 파일: wheel_diameter: 0.3302 (물리적 실제값)
  # - Control.yaml: wheel_radius_multiplier: 1.0 (소프트웨어 보정값)

  # 용도:
  # - separation_multiplier: 실제 측정된 바퀴 간격에 맞춤
  # - radius_multiplier: 타이어 마모, 공기압 등으로 인한 보정

